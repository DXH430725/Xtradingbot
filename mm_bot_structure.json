{
  "mm_bot/__init__.py": {
    "doc": "mm_bot package root for simplified bot components.",
    "imports": [],
    "functions": [],
    "classes": []
  },
  "mm_bot/bin/run_as_model.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "os",
      "sys",
      "mm_bot.logger.logger:setup_logging",
      "mm_bot.core.trading_core:TradingCore",
      "mm_bot.connector.lighter.lighter_exchange:LighterConnector",
      "mm_bot.connector.lighter.lighter_exchange:LighterConfig",
      "mm_bot.connector.grvt.grvt_exchange:GrvtConnector",
      "mm_bot.connector.grvt.grvt_exchange:GrvtConfig",
      "mm_bot.strategy.as_model:AvellanedaStoikovStrategy",
      "mm_bot.strategy.as_model:ASParams",
      "mm_bot.conf.config:load_config"
    ],
    "functions": [
      {
        "name": "main",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      }
    ],
    "classes": []
  },
  "mm_bot/bin/run_backpack_perp_mm.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "os",
      "sys",
      "mm_bot.logger.logger:setup_logging",
      "mm_bot.core.trading_core:TradingCore",
      "mm_bot.connector.backpack.backpack_exchange:BackpackConnector",
      "mm_bot.connector.backpack.backpack_exchange:BackpackConfig",
      "mm_bot.strategy.backpack_perp_market_maker:BackpackPerpMarketMakerStrategy",
      "mm_bot.strategy.backpack_perp_market_maker:PerpMarketMakerParams",
      "mm_bot.conf.config:load_config"
    ],
    "functions": [
      {
        "name": "_as_bool",
        "args": [
          "value",
          "default"
        ],
        "defaults": 1,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "_as_float",
        "args": [
          "value",
          "default"
        ],
        "defaults": 1,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "_as_int",
        "args": [
          "value",
          "default"
        ],
        "defaults": 1,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "main",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      }
    ],
    "classes": []
  },
  "mm_bot/bin/run_cross_arb.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "os",
      "sys",
      "mm_bot.logger.logger:setup_logging",
      "mm_bot.core.trading_core:TradingCore",
      "mm_bot.connector.lighter.lighter_exchange:LighterConnector",
      "mm_bot.connector.lighter.lighter_exchange:LighterConfig",
      "mm_bot.connector.backpack.backpack_exchange:BackpackConnector",
      "mm_bot.connector.backpack.backpack_exchange:BackpackConfig",
      "mm_bot.strategy.cross_market_arbitrage:CrossMarketArbitrageStrategy",
      "mm_bot.strategy.cross_market_arbitrage:CrossArbParams",
      "mm_bot.conf.config:load_config"
    ],
    "functions": [
      {
        "name": "_as_bool",
        "args": [
          "value",
          "default"
        ],
        "defaults": 1,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "main",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      }
    ],
    "classes": []
  },
  "mm_bot/bin/run_grid_geometric.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "os",
      "sys",
      "mm_bot.logger.logger:setup_logging",
      "mm_bot.core.trading_core:TradingCore",
      "mm_bot.connector.lighter.lighter_exchange:LighterConnector",
      "mm_bot.connector.lighter.lighter_exchange:LighterConfig",
      "mm_bot.connector.grvt.grvt_exchange:GrvtConnector",
      "mm_bot.connector.grvt.grvt_exchange:GrvtConfig",
      "mm_bot.strategy.geometric_grid:GeometricGridParams",
      "mm_bot.strategy.geometric_grid:GeometricGridStrategy",
      "mm_bot.conf.config:load_config"
    ],
    "functions": [
      {
        "name": "main",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      }
    ],
    "classes": []
  },
  "mm_bot/bin/run_hedge_ladder.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "os",
      "sys",
      "mm_bot.conf.config:load_config",
      "mm_bot.core.trading_core:TradingCore",
      "mm_bot.logger.logger:setup_logging",
      "mm_bot.connector.backpack.backpack_exchange:BackpackConnector",
      "mm_bot.connector.backpack.backpack_exchange:BackpackConfig",
      "mm_bot.connector.lighter.lighter_exchange:LighterConnector",
      "mm_bot.connector.lighter.lighter_exchange:LighterConfig",
      "mm_bot.strategy.hedge_ladder:HedgeLadderStrategy",
      "mm_bot.strategy.hedge_ladder:HedgeLadderParams"
    ],
    "functions": [
      {
        "name": "_as_bool",
        "args": [
          "value",
          "default"
        ],
        "defaults": 1,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "_as_float",
        "args": [
          "value",
          "default"
        ],
        "defaults": 1,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "_as_int",
        "args": [
          "value",
          "default"
        ],
        "defaults": 1,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "main",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      }
    ],
    "classes": []
  },
  "mm_bot/bin/run_hedge_wash.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "math",
      "os",
      "random",
      "time",
      "dataclasses:dataclass",
      "pathlib:Path",
      "typing:Any",
      "typing:Callable",
      "typing:Dict",
      "typing:List",
      "typing:Optional",
      "typing:Tuple",
      "sys",
      "mm_bot.connector.lighter.lighter_exchange:LighterConnector",
      "mm_bot.connector.lighter.lighter_exchange:LighterConfig",
      "mm_bot.connector.backpack.backpack_exchange:BackpackConnector",
      "mm_bot.connector.backpack.backpack_exchange:BackpackConfig"
    ],
    "functions": [
      {
        "name": "_norm_sym_bp",
        "args": [
          "sym"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "_norm_sym_lg",
        "args": [
          "sym"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "_delta_tolerance",
        "args": [
          "delta"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "_extract_order_id",
        "args": [
          "ret"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "load_hedge_config",
        "args": [
          "path"
        ],
        "defaults": 1,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "_try_float",
        "args": [
          "val"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "_iter_backpack_positions",
        "args": [
          "payload"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "_iter_lighter_positions",
        "args": [
          "lighter",
          "payload"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "bootstrap_backpack_positions",
        "args": [
          "backpack",
          "tracker"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      },
      {
        "name": "bootstrap_lighter_positions",
        "args": [
          "lighter",
          "tracker"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      },
      {
        "name": "wait_position_delta",
        "args": [
          "tracker",
          "symbol",
          "previous",
          "expected_delta",
          "venue_name",
          "timeout"
        ],
        "defaults": 1,
        "kwonly": [],
        "doc": null,
        "is_async": true
      },
      {
        "name": "discover_pairs",
        "args": [
          "lighter",
          "backpack"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      },
      {
        "name": "pick_size_common",
        "args": [
          "backpack",
          "lighter",
          "bp_sym",
          "lg_sym"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      },
      {
        "name": "main",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      }
    ],
    "classes": [
      {
        "name": "OrderSizeMeta",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "CrossVenueSize",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "HedgeStrategyConfig",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "HedgeConfigBundle",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "WSPositionTracker",
        "bases": [],
        "doc": "Small helper to await position changes surfaced via WS callbacks.",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "name"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "prime",
            "args": [
              "self",
              "symbol",
              "value",
              "raw"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "update",
            "args": [
              "self",
              "symbol",
              "value",
              "raw"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "snapshot",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "wait_for",
            "args": [
              "self",
              "symbol",
              "predicate",
              "timeout"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          }
        ]
      }
    ]
  },
  "mm_bot/bin/run_trend_ladder.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "os",
      "sys",
      "mm_bot.logger.logger:setup_logging",
      "mm_bot.core.trading_core:TradingCore",
      "mm_bot.connector.backpack.backpack_exchange:BackpackConnector",
      "mm_bot.connector.backpack.backpack_exchange:BackpackConfig",
      "mm_bot.strategy.trend_ladder:TrendAdaptiveLadderStrategy",
      "mm_bot.strategy.trend_ladder:TrendLadderParams",
      "mm_bot.conf.config:load_config"
    ],
    "functions": [
      {
        "name": "main",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      }
    ],
    "classes": []
  },
  "mm_bot/conf/config.py": {
    "doc": null,
    "imports": [
      "os",
      "json",
      "typing:Any",
      "typing:Dict",
      "typing:Optional"
    ],
    "functions": [
      {
        "name": "load_config",
        "args": [
          "path"
        ],
        "defaults": 1,
        "kwonly": [],
        "doc": "Load bot configuration from YAML or JSON.\nPriority: explicit path -> env XTB_CONFIG -> default mm_bot/conf/bot.yaml.\nIf both YAML and JSON fail, return empty dict.",
        "is_async": false
      }
    ],
    "classes": []
  },
  "mm_bot/connector/interfaces.py": {
    "doc": null,
    "imports": [
      "__future__:annotations",
      "asyncio",
      "typing:Any",
      "typing:Callable",
      "typing:Dict",
      "typing:List",
      "typing:Optional",
      "typing:Protocol",
      "typing:Tuple"
    ],
    "functions": [],
    "classes": [
      {
        "name": "IConnector",
        "bases": [
          "Protocol"
        ],
        "doc": null,
        "methods": [
          {
            "name": "start",
            "args": [
              "self",
              "core"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "stop",
            "args": [
              "self",
              "core"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "close",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "set_event_handlers",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [
              "on_order_filled",
              "on_order_cancelled",
              "on_trade",
              "on_position_update"
            ],
            "doc": null,
            "is_async": false
          },
          {
            "name": "start_ws_state",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "stop_ws_state",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "list_symbols",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_market_id",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_price_size_decimals",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_min_order_size_i",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_top_of_book",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_account_overview",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_open_orders",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_positions",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "place_limit",
            "args": [
              "self",
              "symbol",
              "client_order_index",
              "base_amount",
              "price",
              "is_ask",
              "post_only",
              "reduce_only"
            ],
            "defaults": 2,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "place_market",
            "args": [
              "self",
              "symbol",
              "client_order_index",
              "base_amount",
              "is_ask",
              "reduce_only"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "cancel_order",
            "args": [
              "self",
              "order_index",
              "market_index"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "cancel_all",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "best_effort_latency_ms",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          }
        ]
      }
    ]
  },
  "mm_bot/connector/__init__.py": {
    "doc": null,
    "imports": [],
    "functions": [],
    "classes": []
  },
  "mm_bot/connector/backpack/backpack_exchange.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "base64",
      "json",
      "logging",
      "time",
      "dataclasses:dataclass",
      "typing:Any",
      "typing:Dict",
      "typing:List",
      "typing:Optional",
      "typing:Tuple",
      "typing:Callable",
      "aiohttp",
      "websockets",
      "nacl.signing:SigningKey",
      "nacl.encoding:RawEncoder",
      "mm_bot.utils.throttler:RateLimiter",
      "mm_bot.utils.throttler:lighter_default_weights"
    ],
    "functions": [
      {
        "name": "load_backpack_keys",
        "args": [
          "path"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      }
    ],
    "classes": [
      {
        "name": "BackpackConfig",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "BackpackConnector",
        "bases": [],
        "doc": null,
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "config"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "start",
            "args": [
              "self",
              "core"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "close",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "set_event_handlers",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [
              "on_order_filled",
              "on_order_cancelled",
              "on_trade",
              "on_position_update"
            ],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_ensure_markets",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "list_symbols",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_market_id",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_price_size_decimals",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_auth_headers",
            "args": [
              "self",
              "instruction",
              "params"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "best_effort_latency_ms",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_account_overview",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_balances",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_collateral",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_positions",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_open_orders",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_market_info",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_order_book",
            "args": [
              "self",
              "symbol",
              "depth"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_top_of_book",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "place_limit",
            "args": [
              "self",
              "symbol",
              "client_order_index",
              "base_amount",
              "price",
              "is_ask",
              "post_only",
              "reduce_only"
            ],
            "defaults": 2,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "place_market",
            "args": [
              "self",
              "symbol",
              "client_order_index",
              "base_amount",
              "is_ask",
              "reduce_only"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "cancel_order",
            "args": [
              "self",
              "order_index",
              "symbol"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_order",
            "args": [
              "self",
              "symbol",
              "order_id",
              "client_id"
            ],
            "defaults": 2,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "cancel_all",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "cancel_by_client_id",
            "args": [
              "self",
              "symbol",
              "client_id"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "start_ws_state",
            "args": [
              "self",
              "symbols"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "stop_ws_state",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_ws_loop",
            "args": [
              "self",
              "symbols"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_private_ws_subscriptions",
            "args": [
              "self",
              "symbols"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_handle_private_order_event",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_handle_private_position_event",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          }
        ]
      }
    ]
  },
  "mm_bot/connector/grvt/grvt_exchange.py": {
    "doc": null,
    "imports": [
      "os",
      "sys",
      "time",
      "asyncio",
      "dataclasses:dataclass",
      "decimal:Decimal",
      "typing:Any",
      "typing:Callable",
      "typing:Dict",
      "typing:List",
      "typing:Optional",
      "typing:Tuple"
    ],
    "functions": [
      {
        "name": "_ensure_grvt_on_path",
        "args": [
          "root"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      }
    ],
    "classes": [
      {
        "name": "GrvtConfig",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "GrvtConnector",
        "bases": [],
        "doc": "Skeleton connector for GRVT SDK with a Lighter-compatible interface surface.\nFill in real REST/WS calls using grvt-pysdk.",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "config",
              "debug"
            ],
            "defaults": 2,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "start",
            "args": [
              "self",
              "core"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "stop",
            "args": [
              "self",
              "core"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "close",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "set_event_handlers",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [
              "on_order_filled",
              "on_order_cancelled",
              "on_trade",
              "on_position_update"
            ],
            "doc": null,
            "is_async": false
          },
          {
            "name": "start_ws_state",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "stop_ws_state",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_ws_state_loop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_rest_reconcile_loop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": "Every ~10s reconcile WS caches with REST: open orders and positions.\nKeeps _active_orders_by_symbol and _positions_by_symbol in sync with server state.",
            "is_async": true
          },
          {
            "name": "list_symbols",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_market_id",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_price_size_decimals",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_min_order_size_i",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_top_of_book",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_account_overview",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_open_orders",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_positions",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "place_limit",
            "args": [
              "self",
              "symbol",
              "client_order_index",
              "base_amount",
              "price",
              "is_ask",
              "post_only",
              "reduce_only"
            ],
            "defaults": 2,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "place_market",
            "args": [
              "self",
              "symbol",
              "client_order_index",
              "base_amount",
              "is_ask",
              "reduce_only"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "cancel_order",
            "args": [
              "self",
              "order_index",
              "market_index"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "cancel_all",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "best_effort_latency_ms",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_load_keys",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_ensure_markets",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_on_ws_position",
            "args": [
              "self",
              "message"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_on_ws_order",
            "args": [
              "self",
              "message"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_on_ws_fill",
            "args": [
              "self",
              "message"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          }
        ]
      }
    ]
  },
  "mm_bot/connector/lighter/lighter_auth.py": {
    "doc": null,
    "imports": [
      "os",
      "typing:Optional",
      "typing:Tuple"
    ],
    "functions": [
      {
        "name": "load_keys_from_file",
        "args": [
          "path"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": "Parse a simple key file with lines like:\n  api key index: 2\n  public key: <hex>\n  private key: <hex>\n  eth private key: 0x...\nReturns: (api_key_index, api_private_key, api_public_key, eth_private_key)",
        "is_async": false
      },
      {
        "name": "env_or",
        "args": [
          "value",
          "env_key"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      }
    ],
    "classes": []
  },
  "mm_bot/connector/lighter/lighter_exchange.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "json",
      "os",
      "sys",
      "time",
      "logging",
      "collections:deque",
      "dataclasses:dataclass",
      "typing:Any",
      "typing:Deque",
      "typing:Dict",
      "typing:List",
      "typing:Optional",
      "typing:Tuple",
      "typing:Callable",
      "mm_bot.utils.throttler:RateLimiter",
      "mm_bot.utils.throttler:lighter_default_weights",
      "lighter_auth:load_keys_from_file",
      "lighter",
      "eth_account:Account",
      "websockets"
    ],
    "functions": [
      {
        "name": "_ensure_lighter_on_path",
        "args": [
          "root"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      }
    ],
    "classes": [
      {
        "name": "LighterConfig",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "LighterConnector",
        "bases": [],
        "doc": null,
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "config",
              "debug"
            ],
            "defaults": 2,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "start",
            "args": [
              "self",
              "core"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "stop",
            "args": [
              "self",
              "core"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "close",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_ensure_account_index",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_ensure_signer",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_ensure_markets",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "list_symbols",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_price_size_decimals",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": "Return (price_decimals, size_decimals) for a given symbol.",
            "is_async": true
          },
          {
            "name": "get_min_order_size_i",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": "Return minimal base size in integer units for a symbol.",
            "is_async": true
          },
          {
            "name": "get_market_id",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "best_effort_latency_ms",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_account_overview",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_mk_ws",
            "args": [
              "self",
              "market_ids",
              "accounts",
              "host"
            ],
            "defaults": 3,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "start_ws_order_book",
            "args": [
              "self",
              "symbols",
              "on_update"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "start_ws_account",
            "args": [
              "self",
              "on_update"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "stop_ws",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "set_event_handlers",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [
              "on_order_filled",
              "on_order_cancelled",
              "on_trade",
              "on_position_update"
            ],
            "doc": null,
            "is_async": false
          },
          {
            "name": "start_ws_state",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "stop_ws_state",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_ws_state_loop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_rest_reconcile_loop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": "Every 60s reconcile WS open-order cache with REST accountActiveOrders.\nOnly checks markets that currently have WS-known open orders to limit weight.",
            "is_async": true
          },
          {
            "name": "_run_state_ws_once",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_handle_state_message",
            "args": [
              "self",
              "data"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_apply_orders_update",
            "args": [
              "self",
              "orders_dict"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_apply_trades_update",
            "args": [
              "self",
              "trades_dict"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_apply_positions_update",
            "args": [
              "self",
              "positions_dict"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_handle_account_update",
            "args": [
              "self",
              "account_id",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "place_limit",
            "args": [
              "self",
              "symbol",
              "client_order_index",
              "base_amount",
              "price",
              "is_ask",
              "post_only",
              "reduce_only"
            ],
            "defaults": 2,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "is_coi_open",
            "args": [
              "self",
              "client_order_index",
              "market_index"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": "Best-effort REST check whether an order (by client_order_index) appears in account active orders.\nReturns True if present; False if not found; None on error.",
            "is_async": true
          },
          {
            "name": "place_market",
            "args": [
              "self",
              "symbol",
              "client_order_index",
              "base_amount",
              "is_ask",
              "reduce_only"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "cancel_all",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "cancel_order",
            "args": [
              "self",
              "order_index",
              "market_index"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "cancel_by_client_order_index",
            "args": [
              "self",
              "client_order_index",
              "symbol"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "is_order_open",
            "args": [
              "self",
              "order_index",
              "market_index"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": "Best-effort check via REST whether an order is still open.\nReturns True if present in account active orders; False if not found; None on error.",
            "is_async": true
          },
          {
            "name": "get_open_orders",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_positions",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_best_bid",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_best_ask",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "get_top_of_book",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": "Return (best_bid_i, best_ask_i, scale) where scale is 10**decimals detected\nfrom the price string in orderBookOrders. This ensures consistent scaling\nwith how we convert prices to integers elsewhere.",
            "is_async": true
          },
          {
            "name": "_scales",
            "args": [
              "self",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "place_limit_order",
            "args": [
              "self",
              "symbol",
              "side",
              "price",
              "size",
              "post_only",
              "reduce_only"
            ],
            "defaults": 2,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "place_market_order",
            "args": [
              "self",
              "symbol",
              "side",
              "size",
              "reduce_only"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          }
        ]
      }
    ]
  },
  "mm_bot/connector/lighter/lighter_ws.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "json",
      "typing:Callable",
      "typing:Dict",
      "typing:List",
      "typing:Optional"
    ],
    "functions": [],
    "classes": [
      {
        "name": "LighterWS",
        "bases": [],
        "doc": "Thin wrapper around lighter.WsClient with async run loop management.",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "order_book_ids",
              "account_ids",
              "on_order_book_update",
              "on_account_update",
              "host"
            ],
            "defaults": 5,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "start",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_run",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "stop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          }
        ]
      }
    ]
  },
  "mm_bot/connector/lighter/__init__.py": {
    "doc": null,
    "imports": [],
    "functions": [],
    "classes": []
  },
  "mm_bot/core/clock.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "time",
      "typing:Awaitable",
      "typing:Callable",
      "typing:List",
      "typing:Optional"
    ],
    "functions": [
      {
        "name": "_get_logger",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      }
    ],
    "classes": [
      {
        "name": "SimpleClock",
        "bases": [],
        "doc": "Minimal asyncio-based clock that periodically calls registered async tick handlers\nwith the current wall time in milliseconds.",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "tick_size",
              "logger"
            ],
            "defaults": 2,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "add_tick_handler",
            "args": [
              "self",
              "handler"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_run",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "start",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "stop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          }
        ]
      }
    ]
  },
  "mm_bot/core/trading_core.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "os",
      "time",
      "typing:Any",
      "typing:Callable",
      "typing:Dict",
      "typing:Optional",
      "clock:SimpleClock"
    ],
    "functions": [
      {
        "name": "_get_logger",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      }
    ],
    "classes": [
      {
        "name": "TradingCore",
        "bases": [],
        "doc": "A simplified, standalone trading core tailored for a single-exchange, single-strategy MVP.\n\nResponsibilities:\n- Manage a single clock and a set of connectors\n- Host one strategy (pluggable)\n- Provide lifecycle controls (start, stop, shutdown)\n- Optional debug output gated by a switch\n- No dependency on Hummingbot internals",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "tick_size",
              "debug",
              "clock_factory",
              "logger"
            ],
            "defaults": 4,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "dbg",
            "args": [
              "self",
              "msg",
              "exc_info"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_resolve_debug_flag",
            "args": [
              "self",
              "arg_value"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "add_connector",
            "args": [
              "self",
              "name",
              "connector"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": "Register a connector. A connector may optionally implement:\n- start(core)\n- stop(core)\n- cancel_all(timeout: float)\n- ready (bool)",
            "is_async": false
          },
          {
            "name": "remove_connector",
            "args": [
              "self",
              "name"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "set_strategy",
            "args": [
              "self",
              "strategy"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": "Set the active strategy. Strategy should implement:\n- start(core)\n- stop()\n- on_tick(now_ms: float) -> awaitable",
            "is_async": false
          },
          {
            "name": "start",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "stop",
            "args": [
              "self",
              "cancel_orders"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "shutdown",
            "args": [
              "self",
              "cancel_orders"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "status",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          }
        ]
      }
    ]
  },
  "mm_bot/core/__init__.py": {
    "doc": "Core components for the simplified trading bot.",
    "imports": [
      "clock:SimpleClock",
      "trading_core:TradingCore"
    ],
    "functions": [],
    "classes": []
  },
  "mm_bot/logger/logger.py": {
    "doc": null,
    "imports": [
      "logging",
      "logging.config",
      "os",
      "typing:Optional"
    ],
    "functions": [
      {
        "name": "default_logging_dict",
        "args": [
          "log_dir"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "setup_logging",
        "args": [
          "config_path"
        ],
        "defaults": 1,
        "kwonly": [],
        "doc": "Initialize logging using a YAML/JSON config file if provided;\notherwise use a sensible default with console and rotating file.\nEnv overrides: XTB_LOG_DIR, XTB_LOG_LEVEL, XTB_FILE_LOG_LEVEL, XTB_ROOT_LOG_LEVEL",
        "is_async": false
      }
    ],
    "classes": []
  },
  "mm_bot/strategy/as_model.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "math",
      "time",
      "collections:deque",
      "dataclasses:dataclass",
      "typing:Any",
      "typing:Deque",
      "typing:Dict",
      "typing:List",
      "typing:Optional",
      "typing:Tuple",
      "mm_bot.strategy.strategy_base:StrategyBase",
      "mm_bot.connector.interfaces:IConnector"
    ],
    "functions": [],
    "classes": [
      {
        "name": "ASParams",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "AvellanedaStoikovStrategy",
        "bases": [
          "StrategyBase"
        ],
        "doc": "Avellaneda–Stoikov market making strategy.\n\n- Estimates short-term volatility from rolling mid samples\n- Computes reservation price r_t and optimal half-spread delta_t\n- Quotes bid/ask around r_t as post-only orders\n- Cancels prior working orders before placing new quotes (simple replace policy)\n- Inventory from connector positions; basic skew via reservation price",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "connector",
              "symbol",
              "params"
            ],
            "defaults": 2,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "start",
            "args": [
              "self",
              "core"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "stop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_ensure_ready",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_current_mid_and_scale",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_update_vol_window",
            "args": [
              "self",
              "mid_i",
              "now_ms"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_sigma_abs_per_sec",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_find_open_for_side",
            "args": [
              "self",
              "is_ask"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": "Return list of our open orders for the side (best-effort).\nWe identify by symbol and side; connector returns 'is_ask' and integer 'price'.",
            "is_async": true
          },
          {
            "name": "_update_quote_side",
            "args": [
              "self",
              "target_price_i",
              "is_ask"
            ],
            "defaults": 0,
            "kwonly": [
              "reduce_only"
            ],
            "doc": "Conditionally update a side with double-buffering and side limits.\n- If existing top order price within requote_ticks, keep; else place new then cancel old.\n- Limit max 2 live orders per side.\nReturns client_order_index of placed order or None if unchanged/failed.",
            "is_async": true
          },
          {
            "name": "_cancel_prev_quotes",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_place_post_only",
            "args": [
              "self",
              "price_i",
              "is_ask"
            ],
            "defaults": 0,
            "kwonly": [
              "reduce_only"
            ],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_inventory_base",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "on_tick",
            "args": [
              "self",
              "now_ms"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_collect_telemetry",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_telemetry_loop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          }
        ]
      }
    ]
  },
  "mm_bot/strategy/backpack_perp_market_maker.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "math",
      "time",
      "dataclasses:dataclass",
      "typing:Any",
      "typing:Dict",
      "typing:List",
      "typing:Optional",
      "typing:Tuple",
      "strategy_base:StrategyBase",
      "mm_bot.connector.backpack.backpack_exchange:BackpackConnector"
    ],
    "functions": [],
    "classes": [
      {
        "name": "PerpMarketMakerParams",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "BackpackPerpMarketMakerStrategy",
        "bases": [
          "StrategyBase"
        ],
        "doc": null,
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "connector",
              "params",
              "logger"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "start",
            "args": [
              "self",
              "core"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "stop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "on_tick",
            "args": [
              "self",
              "now_ms"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_run_cycle",
            "args": [
              "self",
              "now_ms"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_ensure_initialized",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_calculate_prices",
            "args": [
              "self",
              "net_position"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_cancel_existing",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_place_side_orders",
            "args": [
              "self",
              "prices"
            ],
            "defaults": 0,
            "kwonly": [
              "is_ask",
              "quantity"
            ],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_manage_position",
            "args": [
              "self",
              "net_position"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_close_position",
            "args": [
              "self",
              "qty",
              "net_position"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_get_net_position",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_resolve_order_quantity",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_sanitize_quantity",
            "args": [
              "self",
              "qty"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_round_price",
            "args": [
              "self",
              "price"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_price_to_int",
            "args": [
              "self",
              "price"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_quantity_to_int",
            "args": [
              "self",
              "quantity"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_next_client_order_index",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_handle_order_event",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_handle_trade_event",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_handle_position_update",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          }
        ]
      }
    ]
  },
  "mm_bot/strategy/cross_market_arbitrage.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "time",
      "dataclasses:dataclass",
      "typing:Any",
      "typing:Dict",
      "typing:List",
      "typing:Optional",
      "typing:Tuple",
      "strategy_base:StrategyBase",
      "arb.order_exec:LegExecutionResult",
      "arb.order_exec:LegOrder",
      "arb.order_exec:OrderTracker",
      "arb.order_exec:TrackingLimitExecutor",
      "arb.order_exec:parse_backpack_event",
      "arb.order_exec:parse_lighter_event",
      "arb.pairing:discover_pairs",
      "arb.pairing:pick_common_sizes"
    ],
    "functions": [],
    "classes": [
      {
        "name": "CrossArbParams",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "CrossMarketArbitrageStrategy",
        "bases": [
          "StrategyBase"
        ],
        "doc": null,
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "lighter_connector",
              "backpack_connector",
              "params",
              "symbol_filters",
              "logger"
            ],
            "defaults": 3,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "start",
            "args": [
              "self",
              "core"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "stop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_cancel_backpack_order",
            "args": [
              "self",
              "client_order_index",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_cancel_lighter_order",
            "args": [
              "self",
              "client_order_index",
              "symbol"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_on_backpack_order_event",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_on_lighter_order_event",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_on_backpack_trade",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_on_lighter_trade",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_on_backpack_position",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_on_lighter_position",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_ensure_pair_subscriptions",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_stop_core_after_debug",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_maybe_finish_debug_cycle",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_ensure_pairs",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_within_maintenance",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_pre_maint_window",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_maybe_circuit_break",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_next_client_order_index",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_register_delta_failure",
            "args": [
              "self",
              "reason"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_flatten_all_positions",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_close_position",
            "args": [
              "self",
              "key",
              "st"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_build_entry_legs",
            "args": [
              "self",
              "direction",
              "bp_sym",
              "lg_sym",
              "size_bp_i",
              "size_lg_i"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_place_market_leg",
            "args": [
              "self",
              "leg",
              "size_i"
            ],
            "defaults": 0,
            "kwonly": [
              "invert",
              "reduce_only"
            ],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_rebalance_after_entry_failure",
            "args": [
              "self",
              "legs",
              "results",
              "reason"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_compute_size_info",
            "args": [
              "self",
              "bp_sym",
              "lg_sym"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_gather_opportunities",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_execute_entry",
            "args": [
              "self",
              "opportunity",
              "now_ms"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_execute_lighter_market_leg",
            "args": [
              "self",
              "leg"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_enter_if_opportunity",
            "args": [
              "self",
              "now_ms"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_ensure_balanced_positions",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_maybe_exit_positions",
            "args": [
              "self",
              "now_ms"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "on_tick",
            "args": [
              "self",
              "now_ms"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          }
        ]
      }
    ]
  },
  "mm_bot/strategy/geometric_grid.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "math",
      "dataclasses:dataclass",
      "typing:Any",
      "typing:Dict",
      "typing:List",
      "typing:Optional",
      "typing:Tuple",
      "mm_bot.strategy.strategy_base:StrategyBase"
    ],
    "functions": [],
    "classes": [
      {
        "name": "GeometricGridParams",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "GeometricGridStrategy",
        "bases": [
          "StrategyBase"
        ],
        "doc": null,
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "connector",
              "symbol",
              "params"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "start",
            "args": [
              "self",
              "core"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "stop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_on_filled",
            "args": [
              "self",
              "info"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_on_cancelled",
            "args": [
              "self",
              "info"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_ensure_ready",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_build_grid_prices",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_budget_size_i",
            "args": [
              "self",
              "price_i",
              "per_side_slots"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_extract_order_price_i",
            "args": [
              "self",
              "od"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_sync_open_orders_cache",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_current_position_i",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_coi",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_place_limit",
            "args": [
              "self",
              "price_i",
              "is_ask",
              "size_i"
            ],
            "defaults": 0,
            "kwonly": [
              "reduce_only"
            ],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_ensure_grid_orders",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_select_initial_levels",
            "args": [
              "self",
              "mid_i"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_handle_fill_followups",
            "args": [
              "self",
              "price_i",
              "is_ask"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "on_tick",
            "args": [
              "self",
              "now_ms"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          }
        ]
      }
    ]
  },
  "mm_bot/strategy/hedge_ladder.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "time",
      "collections:deque",
      "dataclasses:dataclass",
      "typing:Any",
      "typing:Dict",
      "typing:Optional",
      "mm_bot.strategy.strategy_base:StrategyBase"
    ],
    "functions": [],
    "classes": [
      {
        "name": "HedgeLadderParams",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "HedgeLadderStrategy",
        "bases": [
          "StrategyBase"
        ],
        "doc": null,
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "backpack_connector",
              "lighter_connector",
              "params",
              "logger"
            ],
            "defaults": 2,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "start",
            "args": [
              "self",
              "core"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "stop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_ensure_ready",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_next_coi",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_on_backpack_position",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_on_lighter_position",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_on_lighter_event",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_on_backpack_filled",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_on_backpack_cancelled",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_place_take_profit",
            "args": [
              "self",
              "entry_coi",
              "entry_price_i",
              "size_i"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_maybe_place_entry",
            "args": [
              "self",
              "now_ms"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_ensure_hedges",
            "args": [
              "self",
              "last_price"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_open_hedge",
            "args": [
              "self",
              "entry_coi",
              "record"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_ensure_hedge_closed",
            "args": [
              "self",
              "entry_coi",
              "record"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_execute_lighter_market_order",
            "args": [
              "self",
              "size_i"
            ],
            "defaults": 0,
            "kwonly": [
              "is_ask",
              "reduce_only"
            ],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_respect_hedge_rate_limit",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "on_tick",
            "args": [
              "self",
              "now_ms"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "shutdown",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          }
        ]
      }
    ]
  },
  "mm_bot/strategy/strategy_base.py": {
    "doc": null,
    "imports": [
      "typing:Any"
    ],
    "functions": [],
    "classes": [
      {
        "name": "StrategyBase",
        "bases": [],
        "doc": null,
        "methods": [
          {
            "name": "start",
            "args": [
              "self",
              "core"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "stop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "on_tick",
            "args": [
              "self",
              "now_ms"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          }
        ]
      }
    ]
  },
  "mm_bot/strategy/trend_ladder.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "math",
      "time",
      "dataclasses:dataclass",
      "typing:Any",
      "typing:Deque",
      "typing:Dict",
      "typing:List",
      "typing:Optional",
      "typing:Tuple",
      "collections:deque",
      "mm_bot.strategy.strategy_base:StrategyBase",
      "mm_bot.connector.backpack.backpack_exchange:BackpackConnector"
    ],
    "functions": [],
    "classes": [
      {
        "name": "TrendLadderParams",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "TrendAdaptiveLadderStrategy",
        "bases": [
          "StrategyBase"
        ],
        "doc": null,
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "connector",
              "symbol",
              "params"
            ],
            "defaults": 2,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_place_limit_with_retry",
            "args": [
              "self",
              "base_amount_i",
              "price_i",
              "is_ask",
              "post_only",
              "reduce_only",
              "retries",
              "retry_delay"
            ],
            "defaults": 4,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "start",
            "args": [
              "self",
              "core"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "stop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_on_filled",
            "args": [
              "self",
              "info"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_on_cancelled",
            "args": [
              "self",
              "info"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_ensure_ready",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_order_id_of",
            "args": [
              "self",
              "obj"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_client_order_index_of",
            "args": [
              "self",
              "obj"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_order_is_reduce_only",
            "args": [
              "self",
              "obj"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_order_is_post_only",
            "args": [
              "self",
              "obj"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_order_side_label",
            "args": [
              "self",
              "obj"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_order_price_i",
            "args": [
              "self",
              "obj"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_order_amount_i",
            "args": [
              "self",
              "obj"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_quantize_price_i",
            "args": [
              "self",
              "price_i",
              "is_ask"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_quantize_size_i",
            "args": [
              "self",
              "size_i",
              "prefer_up"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_has_pending_entry",
            "args": [
              "self",
              "side"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_hydrate_existing_orders",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_trade_amount_i",
            "args": [
              "self",
              "t"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_trade_is_ask",
            "args": [
              "self",
              "t"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_trade_coi",
            "args": [
              "self",
              "t"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_handle_trade",
            "args": [
              "self",
              "t"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_on_price",
            "args": [
              "self",
              "price_i",
              "now_ms"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_ema",
            "args": [
              "self",
              "values",
              "length"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_atr",
            "args": [
              "self",
              "bars",
              "length"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_compute_slope",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_net_position_base",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_collect_telemetry",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_telemetry_loop",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_cancel_all_entries_and_tps",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_place_flush_tp",
            "args": [
              "self",
              "bid",
              "ask"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": "Place a single reduce-only TP near best to flatten current net position.",
            "is_async": true
          },
          {
            "name": "_place_entry",
            "args": [
              "self",
              "side",
              "best_bid",
              "best_ask"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_desired_entry_price",
            "args": [
              "self",
              "side",
              "best_bid",
              "best_ask"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_requote_stale_entries",
            "args": [
              "self",
              "best_bid",
              "best_ask"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_place_tp_for_entry",
            "args": [
              "self",
              "entry_price_i",
              "side"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_sum_open_coverage_i",
            "args": [
              "self",
              "need_sell",
              "opens"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": "Sum integer base units of open orders that would reduce the position.\nIf need_sell=True, count asks; else count bids. Prefer explicit base_amount; fallback to size/amount.\nReturns: (total_i, count_matched, count_total)",
            "is_async": false
          },
          {
            "name": "_tp_coverage_check_and_correct",
            "args": [
              "self",
              "bid",
              "ask"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": "Check coverage between net position and open reduce-only side coverage.\nIf deficit >= one lot, place reduce-only TPs to correct, rate-limited.\nReturns True if any correction orders were placed.",
            "is_async": true
          },
          {
            "name": "_cancel_side_entries",
            "args": [
              "self",
              "side"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          },
          {
            "name": "_calculate_wait_time",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": "Return 0 to place now, 1 to wait a tick based on active close orders.",
            "is_async": false
          },
          {
            "name": "on_tick",
            "args": [
              "self",
              "now_ms"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": true
          }
        ]
      }
    ]
  },
  "mm_bot/strategy/arb/order_exec.py": {
    "doc": "Order execution helpers for arbitrage strategies.",
    "imports": [
      "__future__:annotations",
      "asyncio",
      "logging",
      "dataclasses:dataclass",
      "dataclasses:field",
      "typing:Any",
      "typing:Callable",
      "typing:Dict",
      "typing:Optional",
      "typing:Tuple"
    ],
    "functions": [
      {
        "name": "parse_backpack_event",
        "args": [
          "payload"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      },
      {
        "name": "parse_lighter_event",
        "args": [
          "payload"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      }
    ],
    "classes": [
      {
        "name": "OrderCompletion",
        "bases": [],
        "doc": null,
        "methods": [
          {
            "name": "is_terminal",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          }
        ]
      },
      {
        "name": "_OrderContext",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "OrderTracker",
        "bases": [],
        "doc": "Track per-venue order lifecycle via WS event callbacks.",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "venue",
              "parser"
            ],
            "defaults": 0,
            "kwonly": [
              "logger"
            ],
            "doc": null,
            "is_async": false
          },
          {
            "name": "register",
            "args": [
              "self",
              "client_order_index"
            ],
            "defaults": 0,
            "kwonly": [
              "symbol",
              "size_i",
              "metadata"
            ],
            "doc": null,
            "is_async": false
          },
          {
            "name": "handle_event",
            "args": [
              "self",
              "payload"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "fail",
            "args": [
              "self",
              "client_order_index",
              "reason"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "timeout",
            "args": [
              "self",
              "client_order_index"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "clear",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          }
        ]
      },
      {
        "name": "LegOrder",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "LegExecutionResult",
        "bases": [],
        "doc": null,
        "methods": []
      },
      {
        "name": "TrackingLimitExecutor",
        "bases": [],
        "doc": "Execute tracking limit orders with automatic re-post and optional market fallback.",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [
              "venue",
              "connector",
              "order_tracker",
              "next_client_order_index",
              "top_of_book_fetcher",
              "cancel_by_coi",
              "logger"
            ],
            "doc": null,
            "is_async": false
          },
          {
            "name": "run",
            "args": [
              "self",
              "leg"
            ],
            "defaults": 0,
            "kwonly": [
              "wait_seconds",
              "max_retries",
              "allow_market_fallback"
            ],
            "doc": null,
            "is_async": true
          }
        ]
      }
    ]
  },
  "mm_bot/strategy/arb/pairing.py": {
    "doc": "Pair discovery and sizing helpers shared by cross-market arbitrage strategies.",
    "imports": [
      "__future__:annotations",
      "typing:Any",
      "typing:Dict",
      "typing:List",
      "typing:Optional",
      "typing:Tuple"
    ],
    "functions": [
      {
        "name": "normalize_backpack_symbol",
        "args": [
          "sym"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": "Return (base, quote, is_perp) for a Backpack symbol.",
        "is_async": false
      },
      {
        "name": "normalize_lighter_symbol",
        "args": [
          "sym"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": "Return (base, quote, is_perp) for a Lighter symbol.",
        "is_async": false
      },
      {
        "name": "discover_pairs",
        "args": [
          "lighter",
          "backpack"
        ],
        "defaults": 0,
        "kwonly": [
          "symbol_filters"
        ],
        "doc": "Return overlapping Backpack/Lighter markets along with discovery diagnostics.",
        "is_async": true
      },
      {
        "name": "pick_common_sizes",
        "args": [
          "backpack",
          "lighter",
          "bp_sym",
          "lg_sym"
        ],
        "defaults": 0,
        "kwonly": [],
        "doc": "Pick venue-specific minimal sizes that align both legs in base units.",
        "is_async": true
      }
    ],
    "classes": []
  },
  "mm_bot/strategy/arb/__init__.py": {
    "doc": "Utilities and components shared across arbitrage strategies.",
    "imports": [],
    "functions": [],
    "classes": []
  },
  "mm_bot/test/test_backpack_connector.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "os",
      "sys",
      "time",
      "mm_bot.connector.backpack.backpack_exchange:BackpackConnector",
      "mm_bot.connector.backpack.backpack_exchange:BackpackConfig"
    ],
    "functions": [
      {
        "name": "main",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      }
    ],
    "classes": []
  },
  "mm_bot/test/test_clock.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "time",
      "os",
      "sys",
      "pytest",
      "mm_bot.core.clock:SimpleClock"
    ],
    "functions": [
      {
        "name": "test_simple_clock_ticks_and_stops",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": false
      }
    ],
    "classes": []
  },
  "mm_bot/test/test_connector_ws_full.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "os",
      "sys",
      "time",
      "typing:List",
      "typing:Dict",
      "mm_bot.connector.lighter.lighter_exchange:LighterConnector"
    ],
    "functions": [
      {
        "name": "main",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      }
    ],
    "classes": []
  },
  "mm_bot/test/test_grvt_connector.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "os",
      "sys",
      "mm_bot.logger.logger:setup_logging",
      "mm_bot.connector.grvt.grvt_exchange:GrvtConnector",
      "mm_bot.connector.grvt.grvt_exchange:GrvtConfig"
    ],
    "functions": [
      {
        "name": "main",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      }
    ],
    "classes": []
  },
  "mm_bot/test/test_lighter_connector.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "logging",
      "os",
      "sys",
      "time",
      "platform",
      "os.path",
      "json",
      "mm_bot.connector.lighter.lighter_exchange:LighterConnector",
      "mm_bot.connector.lighter.lighter_exchange:LighterConfig"
    ],
    "functions": [
      {
        "name": "main",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": null,
        "is_async": true
      }
    ],
    "classes": []
  },
  "mm_bot/utils/throttler.py": {
    "doc": null,
    "imports": [
      "asyncio",
      "time",
      "collections:defaultdict",
      "typing:Dict",
      "typing:Optional"
    ],
    "functions": [
      {
        "name": "lighter_default_weights",
        "args": [],
        "defaults": 0,
        "kwonly": [],
        "doc": "Weights adapted from lighter_rate_limit.txt.\n\nKeys are endpoint hints; use these when calling acquire().\nFor non-listed endpoints, default to weight=1.",
        "is_async": false
      }
    ],
    "classes": [
      {
        "name": "RateLimiter",
        "bases": [],
        "doc": "Simple token-bucket rate limiter with weighted requests.\n\n- capacity: total tokens in a 60s window\n- weights: per-endpoint weight mapping (defaults to 1)\n- burst: optional instantaneous burst allowance (defaults to capacity)",
        "methods": [
          {
            "name": "__init__",
            "args": [
              "self",
              "capacity_per_minute",
              "weights",
              "burst"
            ],
            "defaults": 3,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "_refill",
            "args": [
              "self"
            ],
            "defaults": 0,
            "kwonly": [],
            "doc": null,
            "is_async": false
          },
          {
            "name": "acquire",
            "args": [
              "self",
              "endpoint_key"
            ],
            "defaults": 1,
            "kwonly": [],
            "doc": null,
            "is_async": true
          }
        ]
      }
    ]
  }
}