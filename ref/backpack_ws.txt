Usage
Subscribing
To use the websocket API, connect to wss://ws.backpack.exchange.

To subscribe to a stream with the name stream send a text frame over the websocket connection with the following JSON payload:

{
  "method": "SUBSCRIBE",
  "params": ["stream"]
}
Similarly, to unsubscribe from a stream with the name stream:

{
  "method": "UNSUBSCRIBE",
  "params": ["stream"]
}
You can subscribe or unsubscribe from multiple streams if you include more than one in the params field.

All data from streams is wrapped in a JSON object of the following form:

{
  "stream": "<stream>",
  "data": "<payload>"
}
The following command can be used to test subscribing to a stream:

(sleep 1; \
echo '{"method":"SUBSCRIBE","params":["depth.SOL_USDC"]}';\
cat) |\
wscat -c wss://ws.backpack.exchange
The payloads for each stream time are outlined below.

Timing
Timestamps are in microseconds (except for the K-line start and end times). The event timestamp is the time the event was emitted from the websocket server, and the engine timestamp is the time the event was generated by the matching engine.

If a message aggregates more than one event (for example, a depth message), the engine timestamp will be the timestamp of the last matching engine event.

Keeping the connection alive
To keep the connection alive, a Ping frame will be sent from the server every 60s, and a Pong is expected to be received from the client. If a Pong is not received within 120s, a Close frame will be sent and the connection will be closed.

If the server is shutting down, a Close frame will be sent and then a grace period of 30s will be given before the connection is closed. The client should reconnect after receiving the Close frame. The client will be reconnected to a server that is not shutting down.

Private
Subscribing to a private stream requires a valid signature generated from an ED25519 keypair. For stream subscriptions, the signature should be of the form:

instruction=subscribe&timestamp=1614550000000&window=5000
Where the timestamp and window are in milliseconds.

Private streams are prefixed with account. and require signature data to be submitted in the subscribe parameters. The verifying key and signature should be base64 encoded.

{
  "method": "SUBSCRIBE",
  "params": ["stream"],
  "signature": ["<verifying key>", "<signature>", "<timestamp>", "<window>"]
}
Private
Subscribing to a private stream requires a valid signature generated from an ED25519 keypair. For stream subscriptions, the signature should be of the form:

instruction=subscribe&timestamp=1614550000000&window=5000
Where the timestamp and window are in milliseconds.

Private streams are prefixed with account. and require signature data to be submitted in the subscribe parameters. The verifying key and signature should be base64 encoded.

{
  "method": "SUBSCRIBE",
  "params": ["stream"],
  "signature": ["<verifying key>", "<signature>", "<timestamp>", "<window>"]
}
Order update
On any mutation to an order the order will be pushed to the order update stream. The event type of the order update will be one of the following:

orderAccepted
orderCancelled
orderExpired
orderFill
orderModified
triggerPlaced
triggerFailed
An orderModified update will be received when a resting reduce only order's quantity is decreased in order to prevent position side reversal.

Stream Name Format
For all markets: account.orderUpdate
For single market: account.orderUpdate.<symbol>
{
  "e": "orderAccepted",   // Event type
  "E": 1694687692980000,  // Event time in microseconds
  "s": "SOL_USD",         // Symbol
  "c": 123,               // Client order ID
  "S": "Bid",             // Side
  "o": "LIMIT",           // Order type
  "f": "GTC",             // Time in force
  "q": "32123",           // Quantity
  "Q": "32123",           // Quantity in quote
  "p": "20",              // Price
  "P": "21",              // Trigger price
  "B": "LastPrice",       // Trigger by
  "a": "30",              // Take profit trigger price
  "b": "10",              // Stop loss trigger price
  "d": "MarkPrice",       // Take profit trigger by
  "g": "IndexPrice",      // Stop loss trigger by
  "Y": "10",              // Trigger quantity
  "X": "Filled",          // Order state
  "R": "PRICE_BAND",      // Order expiry reason
  "i": "1111343026172067" // Order ID
  "t": 567,               // Trade ID
  "l": "1.23",            // Fill quantity
  "z": "321",             // Executed quantity
  "Z": "123",             // Executed quantity in quote
  "L": "20",              // Fill price
  "m": true,              // Whether the order was maker
  "n": "23",              // Fee
  "N": "USD",             // Fee symbol
  "V": "RejectTaker",     // Self trade prevention
  "T": 1694687692989999,  // Engine timestamp in microseconds
  "O": "USER"             // Origin of the update
  "I": "1111343026156135" // Related order ID
  "H": 6023471188         // Strategy ID
  "y": true               // Post only
}
There are several possible values for the O field (origin of the update):

USER: The origin of the update was due to order entry by the user.
LIQUIDATION_AUTOCLOSE: The origin of the update was due to a liquidation by the liquidation engine.
ADL_AUTOCLOSE: The origin of the update was due to an ADL (auto-deleveraging) event.
COLLATERAL_CONVERSION: The origin of the update was due to a collateral conversion to settle debt on the account.
SETTLEMENT_AUTOCLOSE: The origin of the update was due to the settlement of a position on a dated market.
BACKSTOP_LIQUIDITY_PROVIDER: The origin of the update was due to a backstop liquidity provider facilitating a liquidation.
Some fields are conditional on the order settings or event type:

c - Only present if the order has a client order ID.
q - Only present if the order has a quantity set.
Q - Only present if the order is reverse market order.
p - Only present if the order is a limit order.
P - Only present if the order is a trigger order.
B - Only present if the order is a trigger order.
a - Only present if the order has a take profit trigger price set.
b - Only present if the order has a stop loss trigger price set.
d - Only present if the order has a take profit trigger price set.
g - Only present if the order has a stop loss trigger price set.
Y - Only present if the order is a trigger order.
R - Only present if the event is a orderExpired event.
t - Only present if the event is a orderFill event.
l - Only present if the event is a orderFill event.
L - Only present if the event is a orderFill event.
m - Only present if the event is a orderFill event.
n - Only present if the event is a orderFill event.
N - Only present if the event is a orderFill event.
Position update
On any mutation to a position the position will be pushed to the position update stream. The event type of the position update will be one of the following:

positionAdjusted
positionOpened
positionClosed
On subscription, a message will be sent to the client with the current open positions, if any. The e field will not be present in the message.

Stream Name Format
For all markets: account.positionUpdate
For single market: account.positionUpdate.<symbol>
{
  "e": "positionOpened",  // Event type
  "E": 1694687692980000,  // Event time in microseconds
  "s": "SOL_USDC_PERP",    // Symbol
  "b": 123,               // Break event price
  "B": 122,               // Entry price
  "f": 0.5,               // Initial margin fraction
  "M": 122,               // Mark price
  "m": 0.01,              // Maintenance margin fraction
  "q": 5,                 // Net quantity
  "Q": 6,                 // Net exposure quantity
  "n": 732 ,              // Net exposure notional
  "i": "1111343026172067" // Position ID
  "p": "-1",              // PnL realized
  "P": "0",               // PnL unrealized
  "T": 1694687692989999   // Engine timestamp in microseconds
}
The net quantity field will be positive if the position is long and negative if the position is short.

The net exposure quantity field includes exposure from the open position, as well as any open orders.
Book ticker
Stream name format: bookTicker.<symbol>

{
  "e": "bookTicker",          // Event type
  "E": 1694687965941000,      // Event time in microseconds
  "s": "SOL_USDC",            // Symbol
  "a": "18.70",               // Inside ask price
  "A": "1.000",               // Inside ask quantity
  "b": "18.67",               // Inside bid price
  "B": "2.000",               // Inside bid quantity
  "u": "111063070525358080",  // Update ID of event
  "T": 1694687965940999       // Engine timestamp in microseconds
}